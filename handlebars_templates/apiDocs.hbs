<div class="row standalone">
    <div class="standalone-content">
        <h2>Accessing, creating, or modifying your tasks via the API</h2>

        <p>
            Using your API key in an "<code>Authorization</code>" header;
            for an example:
        </p>

        <code>
        <pre>
            Authorization: ApiKey {{ controllers.application.user.username }}:{{ controllers.application.user.api_key }}
        </pre>
        </code>

        <h3>Task Format</h3>

        <p>
            Each task has the following fields:
        </p>
        <table class="pure-table pure-table-horizontal">
            <thead>
                <tr>
                    <th>Field</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>id</code></td>
                    <td>
                        The short ID number of a task.
                        These are not stable and are generally used when
                        using the Taskwarrior command-line client for ease-of
                        entry; if a task is completed, all
                        tasks may receive a new ID number.
                    </td>
                </tr>
                <tr>
                    <td><code>uuid</code></td>
                    <td>
                        The unique ID number of a task.
                        These are stable and can be used in situations where
                        you may want to retrieve a task after it has been completed.
                        <br />
                        <strong>
                            This is the primary key of the task and is a
                            read-only property.
                        </strong>.
                    </td>
                </tr>
                <tr>
                    <td><code>resource_uri</code></td>
                    <td>
                        This is the URL at which this task can be retrieved
                        again in the future.  It will match the URL you used
                        for fetching this task unless you fetched this task
                        from a listing endpoint.
                        <strong>
                            This is a read-only property.
                        </strong>
                    </td>
                </tr>
                <tr>
                    <td><code>status</code></td>
                    <td>
                        One of <code>pending</code>, <code>completed</code>,
                        <code>waiting</code>, or <code>deleted</code>.
                        New tasks default to <code>pending</code>.
                    </td>
                </tr>
                <tr>
                    <td><code>urgency</code></td>
                    <td>
                        A float representing the current calculated urgency level
                        of a task.  This is generated internally by taskwarrior
                        and thus is a <strong>read-only property</strong>.
                    </td>
                </tr>
                <tr>
                    <td><code>description</code></td>
                    <td>
                        The title of this task.
                        <strong>This property is required.</strong>
                    </td>
                </tr>
                <tr>
                    <td><code>priority</code></td>
                    <td>
                        One of <code>H</code>,
                        <code>M</code>, or <code>L</code>.
                    </td>
                </tr>
                <tr>
                    <td><code>due</code></td>
                    <td>
                        A date string representing this task's due date and time.
                    </td>
                </tr>
                <tr>
                    <td><code>entry</code></td>
                    <td>
                        A date string representing this task's entry date and time.
                    </td>
                </tr>
                <tr>
                    <td><code>modified</code></td>
                    <td>
                        A date string representing this task's modified date and time.
                    </td>
                </tr>
                <tr>
                    <td><code>start</code></td>
                    <td>
                        A date string representing the date and time this task was started.
                    </td>
                </tr>
                <tr>
                    <td><code>wait</code></td>
                    <td>
                        A date string representing the date and time to wait
                        before listing this task in the pending task list.
                    </td>
                </tr>
                <tr>
                    <td><code>scheduled</code></td>
                    <td>
                        A date string representing the date and time at which
                        work on this task is scheduled.
                    </td>
                </tr>
                <tr>
                    <td><code>depends</code></td>
                    <td>
                        A comma-separated list of task UUIDs upon which
                        this task depends.
                    </td>
                </tr>
                <tr>
                    <td><code>annotations</code></td>
                    <td>
                        A list of annotations added to this task.

                        <em>
                            Note: this is returned from Taskwarrior as a dictionary
                            having keys <code>entry</code> (the time at which this
                            annotation was added) and <code>description</code> (the
                            annotation text itself), but you are also able update or
                            create task entries by supplying simply a list of string
                            annotations you would like your updated or created task
                            to have.
                        </em>
                    </td>
                </tr>
                <tr>
                    <td><code>tags</code></td>
                    <td>
                        A list of tags assigned to this task.
                    </td>
                </tr>
                <tr>
                    <td><code>imask</code></td>
                    <td>
                        An integer representing this task's <code>imask</code>.  This
                        is a <strong>read-only property</strong> used internally
                        by Taskwarrior for recurring tasks.
                    </td>
                </tr>
            </tbody>
        </table>

        <p>
            Example JSON formatted task:
        </p>

        <code>
        <pre>
            {
                "annotations": [
                    {"description": "Chapter 1", "entry": "Mon, 3 Feb 2014 01:52:51 +0000"},
                    {"description": "Chapter 2", "entry": "Mon, 3 Feb 2014 01:52:53 +0000"}
                ],
                "depends": null,
                "description": "The wheels on the bus go round and round",
                "due": null,
                "entry": "Mon, 3 Feb 2014 01:52:51 +0000",
                "id": 1,
                "imask": null,
                "modified": "Mon, 3 Feb 2014 01:52:52 +0000",
                "priority": null,
                "project": "Alphaville",
                "resource_uri": "/api/v1/task/b8d05cfe-8464-44ef-9d99-eb3e7809d337/",
                "scheduled": null,
                "start": null,
                "status": "waiting",
                "tags": ["very_unimportant", "delayed"],
                "urgency": -0.1,
                "uuid": "b8d05cfe-8464-44ef-9d99-eb3e7809d337",
                "wait": "Thu, 6 Feb 2014 01:52:51 +0000"
            }
        </pre>
        </code>

        <p>
            <em>
                Note that although the displayed task's datetime fields are
                encoded using RFC 2822 date strings in UTC,
                your supplied date strings will be parsed using
                <a href="http://labix.org/python-dateutil#head-c0e81a473b647dfa787dc11e8c69557ec2c3ecd2">dateutil's parse method</a>,
                so you can provide date strings in whatever format is most convenient for you,
                but ISO 8601 or RFC 2822 formatted dates are strongly recommended.
                <strong>
                    Be sure to specify a time zone or offset in your date string.
                </strong>
            </em>
        </p>

        <h3>Endpoints</h3>

        <p>
            All below endpoints share the following list of common response
            codes unless otherwise elaborated upon below:
        </p>

        <ul>
            <li>
                <strong>200</strong>: Success.
            </li>
            <li>
                <strong>201</strong>: Successfully created.
            </li>
            <li>
                <strong>400</strong>: Your request was malformed, or requested
                an impossible operation.  A description of the problem will
                be included in the response.
            </li>
            <li>
                <strong>401</strong>: Your request did not include proper
                authentication headers.  
                Make sure that you've properly sent the Authorization
                header described above.
            </li>
            <li>
                <strong>403</strong>: Your request was not properly authenticated,
                or you have requested an entity for which you do not have
                permission. Make sure that you've properly sent the Authorization
                header described above.
            </li>
            <li>
                <strong>404</strong>: The entity you have requested does not exist.
            </li>
            <li>
                <strong>405</strong>: The request method used is not allowed
                for the endpoint you are sending it to.  Please review
                the below documentation and alter your request to use an acceptable
                method.
            </li>
            <li>
                <strong>409</strong>: Your repository is currently locked.
                During operations against your task list, an exclusive lock
                is obtained to prevent multiple processes from writing to your
                task list simultaneously.  If you receive this error continuously,
                see "Manage Lockfile" below.
            </li>
            <li>
                <strong>500</strong>: A server error occurred while processing
                your request.  An error was logged, and the administrators
                of this site have been notified.  Please try your request again
                later.
            </li>
        </ul>

        <h4>Pending Tasks</h4>

        <h5>Task List: <code>https://inthe.am/api/v1/task/</code></h5>

        <h6>Acceptable Request Methods</h6>
        <ul>
            <li><strong>GET</strong>: List all pending tasks.</li>
            <li><strong>POST</strong>: Given a task payload, create a new task.</li>
        </ul>

        <h5>Task Details: <code>https://inthe.am/api/v1/task/<b>&lt;TASK UUID&gt;</b>/</code></h5>

        <h6>Acceptable Request Methods</h6>
        <ul>
            <li><strong>GET</strong>: Get task details.</li>
            <li><strong>PUT</strong>: Given a task payload, update a task's details.</li>
            <li>
                <strong>DELETE</strong>: Mark an existing task as deleted.
                Perhaps surprisingly, this does not mark a task deleted;
                to mark a Taskwarrior task as deleted, see 'Delete Task'.
            </li>
        </ul>

        <h5>Delete a Task: <code>https://inthe.am/api/v1/task/<b>&lt;TASK UUID&gt;</b>/delete/</code></h5>

        <h6>Acceptable Request Methods</h6>
        <ul>
            <li>
                <strong>POST</strong>: Mark an existing task as deleted.
                Note that although using the <strong>DELETE</strong> method on the
                Task Details endpoint may seem to be more intuitive, it is far
                more common for one to mark a task as completed than deleted.  Think
                of the Task List and Task Details endpoints as being listings of
                only pending tasks, and that by issuing a <strong>DELETE</strong>
                request you're removing it from your pending task list (and 
                moving it to your completed task list).
            </li>
        </ul>

        <h5>Start a Task: <code>https://inthe.am/api/v1/task/<b>&lt;TASK UUID&gt;</b>/start/</code></h5>

        <h6>Acceptable Request Methods</h6>
        <ul>
            <li><strong>POST</strong>: Mark an existing task as started.</li>
        </ul>

        <h5>Stop a Task: <code>https://inthe.am/api/v1/task/<b>&lt;TASK UUID&gt;</b>/stop/</code></h5>

        <h6>Acceptable Request Methods</h6>
        <ul>
            <li><strong>POST</strong>: Mark an existing started task as stopped.</li>
        </ul>

        <h4>Completed Tasks</h4>

        <h5>Completed Task List: <code>https://inthe.am/api/v1/completedtask/</code></h5>

        <h6>Acceptable Request Methods</h6>
        <ul>
            <li>
                <strong>GET</strong>:
                List completed tasks.
            </li>
        </ul>

        <h5>Completed Task Detail: <code>https://inthe.am/api/v1/completedtask/<b>&lt;TASK UUID&gt;</b>/</code></h5>

        <h6>Acceptable Request Methods</h6>
        <ul>
            <li>
                <strong>GET</strong>:
                Get completed task details.
            </li>
        </ul>

        {{partial "footer"}}
    </div>
</div>
